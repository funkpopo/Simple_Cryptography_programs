#include<iostream>
#include<cmath>
using namespace std;

/*=======================Loop_Move循环左移============================*/
void loop_move(int* p, int i)//p指向需要移位数组
{

	if (i == 1)//左移1位
	{
		int temp;
		temp = *(p + 0);
		for (int k = 0; k < 27; k++)
		{
			*(p + k) = *(p + k + 1);
		}
		*(p + 27) = temp;

	}
	else//左移2位
	{
		int temp0;
		int temp1;
		temp0 = *(p + 0);
		temp1 = *(p + 1);
		for (int n = 0; n < 27; n++)
		{
			*(p + n) = *(p + n + 2);
		}
		*(p + 26) = temp0;
		*(p + 27) = temp1;
	}

}
/*=========================异或运算============================*/

void xor_func(int* p1, int* p2, int num)//num为数组内的数据个数
{
	int temp = 0;
	for (int i = 0; i < num; i++)
	{
		temp = *(p1 + i) + *(p2 + i);
		temp = temp - (temp / 2) * 2;
		*(p1 + i) = temp;
	}

}
/*=======================十进制转为二进制============================*/

void dcm2binary(int dcm, int* p)
{
	int temp1 = dcm;
	int temp2;
	for (int i = 3; i >= 0; i--)
	{
		temp2 = temp1 / 2;
		temp1 = temp1 - temp2 * 2;
		*(p + i) = temp1;
		temp1 = temp2;
	}



}
/*==================根据后一次L，R推出前一次L,R====================*/
void getdt1(int E[], int S[][64], int* k, int* L, int* R)//得到上一次的LR
{

	int i, j;
	int NR[48];
	int NDS[32];
	int tR[32];
	int tL[32];
	int h, l, temp;
	for (i = 0; i <= 31; i++)
	{
		tR[i] = *(L + i);//本轮的左边为上一轮末尾的右边
	}
	for (i = 0; i <= 31; i++)
	{
		tL[i] = *(R + i);//把与L异或运算后的NDS赋值给tL
	}

	//对R进行加密获得NDS
	for (i = 0; i <= 47; i++)
	{
		NR[i] = tR[E[i]];
	}

	xor_func(NR, k, 48);
	for (j = 0; j <= 7; j++)
	{
		h = NR[0 + 6 * j] * 2 + NR[5 + 6 * j];
		l = NR[1 + 6 * j] * 8 + NR[2 + 6 * j] * 4 + NR[3 + 6 * j] * 2 + NR[4 + 6 * j];
		temp = S[j][h * 16 + l];
		dcm2binary(temp, (NDS + j * 4));
	}

	xor_func(tL, NDS, 32);//tL再次与NDS异或，得到L
	for (i = 0; i <= 31; i++)
	{
		*(L + i) = tL[i];
	}
	for (i = 0; i <= 31; i++)
	{
		*(R + i) = tR[i];
	}

}

/*=====================输出函数，把二进制转为char字符==================*/
void showt(int a[])//输出a，0、1数组代表的八个字符
{
	char c;
	int temp;
	int i, j, n;
	for (i = 0; i <= 7; i++)
	{
		temp = 0;
		for (j = 0; j <= 7; j++)
		{
			temp = temp + a[i * 8 + j] * (pow(2, (7 - j)));	 //8位二进制转为十进制

		}
		c = temp;//把temp转为字符型
		cout << c << endl;
	}
}




class des_encry;//加密
class ides;//解密

/*=================================产生16个子秘钥======================================*/

class des//用来产生16个子密钥
{
private:
	int K0[56];//密码，没有奇偶校验位。
	int C0[28], D0[28];//第一次将密码分组
	int C[16][28], D[16][28];//以后将密码分组
	int K[16][48];//最终的密码
	int pc2[48];
	int I[16];//移位的位数

public:
	des();
	friend des_encry;
	friend ides;

};
des::des()
{
	//setI()
	int tempI[16] = { 1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 };
	for (int n = 0; n <= 15; n++)
	{
		I[n] = tempI[n];
	}

	//setpc2()
	int temppc2[48] = { 14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,
	41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,55,34,53,46,42,50,36,29,32 };
	for (int n = 0; n <= 47; n++)
	{
		pc2[n] = temppc2[n];
	}

	//setK0()

	int tempK0[56] = { 1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,
	0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0 };
	for (int n = 0; n <= 55; n++)
	{
		K0[n] = tempK0[n];
	}

	//getC0()

	for (int n = 0; n <= 27; n++)
	{
		C0[n] = K0[n];//C0等于K0的前半数据
	}

	//getD0()

	for (int n = 0; n <= 27; n++)
	{
		D0[n] = K0[n + 28];//D0等于K0的后半数据
	}

	//getC()

	int tempC[28];
	for (int n = 0; n <= 27; n++)
	{
		tempC[n] = C0[n];
	}
	for (int i = 0; i <= 15; i++)
	{
		loop_move(tempC, I[i]);//将C0移位I(i)
		for (int n = 0; n <= 27; n++)
		{
			C[i][n] = tempC[n];
		}
	}


	//getD()

	int tempD[28];
	for (int n = 0; n <= 27; n++)
	{
		tempD[n] = D0[n];
	}
	for (int i = 0; i <= 15; i++)
	{
		loop_move(tempD, I[i]);//将D0移位I(i)
		for (int n = 0; n <= 27; n++)
		{
			D[i][n] = tempD[n];
		}
	}


	//getK()

	int CD[56];
	for (int n = 0; n <= 15; n++)//把C0和D0合起来
	{
		for (int i = 0; i <= 27; i++)
		{
			CD[i] = C[n][i];
		}
		for (int i = 28; i <= 55; i++)
		{
			CD[i] = D[n][i - 28];
		}
		for (int i = 0; i <= 47; i++)
		{
			K[n][i] = CD[pc2[i]];
		}
	}
}

/*=======================加密============================*/
//加密算法
class des_encry
{
public:
	des_encry();
	void giveM(int* p);
private:
	char c[8];//原文
	int Y0[64];//原文的二进制形式
	int IP[64];//IP置换表
	int S[8][64];//S盒
	int E[48];//扩充表
	int IP_1[64];//IP置换表
	int L[32];//Y 的左半部分
	int R[32];//Y 的右半部分
	int NR[48];//用E扩充后的bit
	int NDS[32];//S盒压缩后的bit
	int Y[64];//被IP置乱后的Y0
	int M[64];//密文
	int K[16][48];//16个子秘钥
};
des_encry::des_encry()
{
	int i, j;
	int temp1, temp2;
	cout << "输入8字符：" << endl;//DES加密以8个字符为一组
	for (i = 0; i <= 7; i++) { cin >> c[i]; }

	for (i = 0; i <= 7; i++)
	{
		temp1 = c[i];//字符转换为int型ASCII，进而转换成二进制
		for (j = 0; j <= 7; j++)//8个十进制数转换为64个二进制bit
		{
			temp2 = temp1 / 2;
			Y0[i * 8 + 7 - j] = temp1 % 2;
			temp1 = temp2;
		}
	}

	//setS() 八个S黑盒的具体内容
	int tempS[8][64] = {
	{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13},
	{15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9},
		 {10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12},
		 {7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14},
		 {2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3},
		 {12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13},
		 {4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12},
		 {13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11},
	};
	for (i = 0; i <= 7; i++)
	{
		for (j = 0; j <= 63; j++)
		{
			S[i][j] = tempS[i][j];
		}
	}

	//setE() 用于 32位——>48位 扩充的E置换表

	int tempE[48] = { 0,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19
	,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,0,1 };
	for (i = 0; i <= 47; i++)
	{
		E[i] = tempE[i];
	}


	//setIP_1() 置换表

	int tempIP_1[64] = { 40,8,48,16,56,24,0,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,
	30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25 };
	for (i = 0; i <= 63; i++)
	{
		IP_1[i] = tempIP_1[i];
	}

	//setIP() 置换表

	int tempIP[64] = { 19,50,42,34,11,18,10,2,60,51,44,36,28,20,12,7,62,54,46,38,30,17,14,6,0,
	56,48,40,32,24,16,8,57,49,41,33,25,22,9,1,59,52,43,35,27,58,26,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,4 };
	for (i = 0; i <= 63; i++)
	{
		IP[i] = tempIP[i];
	}


	//getKLR() 获取16个子秘钥

	int n;

	int h, l;
	int temp;

	des child_key;

	for (i = 0; i <= 15; i++)
	{
		for (j = 0; j <= 47; j++)
		{
			K[i][j] = child_key.K[i][j];
		}
	}

	//getM() 产生密文
	for (i = 0; i <= 63; i++)
	{
		Y[i] = Y0[IP[i]];//将原始数据经过IP进行第一次置乱
	}

	for (i = 0; i <= 31; i++)//Y 的左半部分
	{
		L[i] = Y[i];

	}

	for (i = 0; i <= 31; i++)//Y 的右半部分
	{
		R[i] = Y[i + 32];

	}

	for (n = 0; n <= 15; n++)
	{

		for (i = 0; i <= 47; i++)
		{
			NR[i] = R[E[i]];//用E把R扩充为48位
		}
		xor_func(NR, child_key.K[n], 48);//用子秘钥K[n]对NR加密（总共加密15轮哦）
		for (j = 0; j <= 7; j++)//S盒压缩处理（6——>4）
		{
			h = NR[0 + 6 * j] * 2 + NR[5 + 6 * j];//首位组成十进制数作为表的 行
			l = NR[1 + 6 * j] * 8 + NR[2 + 6 * j] * 4 + NR[3 + 6 * j] * 2 + NR[4 + 6 * j];//中间组成十进制数作为表的 列
			temp = S[j][h * 16 + l];//对应的十进制值
			dcm2binary(temp, (NDS + j * 4));//把1个十进制数转换为4个二进制bit
		}

		xor_func(NDS, L, 32);//R被加密为NDS后与L异或运算
		for (i = 0; i <= 31; i++)//R作为下一轮加密的L
		{
			L[i] = R[i];
		}
		for (i = 0; i <= 31; i++)//L作为下一轮加密的R
		{
			R[i] = NDS[i];
		}
	}


	//赋值给M
	int tempM[64];
	for (i = 0; i <= 31; i++)
	{
		tempM[i] = L[i];
	}
	for (i = 32; i <= 63; i++)
	{
		tempM[i] = R[i - 32];
	}
	for (i = 0; i <= 63; i++)
	{
		M[i] = tempM[IP_1[i]];
	}

}
void des_encry::giveM(int* p)//把密文赋值给传入的地址
{
	int i;
	for (i = 0; i <= 63; i++)
	{
		*(p + i) = M[i];
	}
}


/*========================================解密=================================*/
class ides
{
public:
	int E[48];
	int S[8][64];
	int IP_1[64];
	int IP[64];
	int K[16][48];
	int A[64];

	ides();
	void getA(int M[]);
	void giveA(int* p);
};
ides::ides()
{
	int i, j;
	//setE()
	int tempE[48] = { 0,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,
	20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,0,1 };
	for (i = 0; i <= 47; i++)
	{
		E[i] = tempE[i];
	}
	//setS()
	int tempS[8][64] = { {14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,0,15,7,4,14,2,13,1,10,6,12,11,
	9,5,3,8,4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13},
		 {15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9},
		 {10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12},
		 {7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14},
		 {2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3},
		 {12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13},
		 {4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12},
		 {13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11},
	};
	for (i = 0; i <= 7; i++)
	{
		for (j = 0; j <= 63; j++)
		{
			S[i][j] = tempS[i][j];
		}
	}

	//getIP_1
	int tempIP_1[64] = { 40,8,48,16,56,24,0,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,
	37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25 };
	for (i = 0; i <= 63; i++)
	{
		IP_1[i] = tempIP_1[i];
	}
	//setIP
	int tempIP[64] = { 19,50,42,34,11,18,10,2,60,51,44,36,28,20,12,7,62,54,46,38,30,17,14,6,0,
	56,48,40,32,24,16,8,57,49,41,33,25,22,9,1,59,52,43,35,27,58,26,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,4 };
	for (i = 0; i <= 63; i++)
	{
		IP[i] = tempIP[i];
	}
	//getK
	des jm;
	for (i = 0; i <= 15; i++)
	{
		for (j = 0; j <= 47; j++)
		{
			K[i][j] = jm.K[i][j];

		}

	}

}
void ides::getA(int M[])
{
	int i, j;
	int nM[64];
	int L[32], R[32];
	for (i = 0; i <= 63; i++)
	{
		nM[IP_1[i]] = M[i];//还原被IP_1置乱的密文
	}
	for (i = 0; i <= 31; i++)
	{
		L[i] = nM[i];
	}
	for (j = 0; j <= 31; j++)
	{
		R[j] = nM[j + 32];
	}
	int tA[64];

	for (i = 15; i >= 0; i--)
	{
		getdt1(E, S, K[i], L, R);
	}//还原16轮的加密
	cout << endl;
	//把L和R合一块
	for (i = 0; i <= 31; i++)
	{
		tA[i] = L[i];
	}
	for (i = 32; i <= 63; i++)
	{
		tA[i] = R[i - 32];
	}
	for (i = 0; i <= 63; i++)
	{
		A[IP[i]] = tA[i];//还原第一次的置乱，获得原文的二进制ASCII bit
	}

}
void ides::giveA(int* p)//把原文赋值给*P
{
	int i;
	for (i = 0; i <= 63; i++)
	{
		*(p + i) = A[i];
	}
}


int main()
{

	int encrypted[64];
	int decrypted[64];
	des_encry encry_func;
	encry_func.giveM(encrypted);
	cout << endl;
	cout << "[密文]：" << endl;

	showt(encrypted);

	ides des_decry;
	des_decry.getA(encrypted);
	des_decry.giveA(decrypted);
	cout << endl;
	cout << "[密文]破解结果：" << endl;
	showt(decrypted);
	cout << endl;


	return 0;
}